var tipuesearch = {"pages": [{'title': 'About', 'text': '國立虎尾科技大學機械設計工程系 \n National Formosa University \n Department of Mechanical Design Engineering \n cp2024 計算機程式 \n 課程教材: \n Learn Python with Jupyter  ( site ,  ebook ) \n 教育版帳號\xa0microsoftonline 登入點:\xa0 https://login.microsoftonline.com/ \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入  https://login.microsoftonline.com/  Office 365 \n Teams 團隊代碼:  ldodwua \n 個人倉儲: \n https://github.com/mdecp2024/mdecp2024-hw-cp2024_hw \n 個人網站: \n https://potential-engine-5g4xpwjvvpgxfr47-8081.app.github.dev/content/index.html \n 其他資訊: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n', 'tags': '', 'url': 'About.html'}, {'title': 'Attendance', 'text': '出席 (10%) - 自行舉證評分 \n 自行利用 Github commits 提交記錄評分. \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW 1', 'text': '主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%) \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n Jupyter \n What are Github and Codespaces? \n Hello World - GitHub Docs \n 利用包含學號的字串作為帳號, 申請免費使用 Github. \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 1 \n \n PART 1: Creating the basics 資料整理 (10%) \n 啟動可攜程式系統後, 在命令列中: \n y:\\>cd notebook \n y:\\notebook>jupyter lab --collaborative \n 進入  01_string_input_print.ipynb  練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過  https://nbviewer.org/  將已經提交的  01_string_input_print.ipynb , 嵌入下列網頁中. \n \n 上列 iframe 標註的 html 語法: \n <iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"></iframe> \n 完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 1.html'}, {'title': 'HW 1 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 1 Exam.html'}, {'title': 'w7', 'text': '\n', 'tags': '', 'url': 'w7.html'}, {'title': 'w10', 'text': '\n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w10.html'}, {'title': 'w11_hw', 'text': '以下影片說明如何利用近端可攜系統維護個人作業網站: \n \n 1.\xa0 已知可以用 Python 程式 由上往下列印三角形 * , 或 由左往右列印三角形 * , 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL) \n 第一題  連結 \n 2. \xa0 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域. \n 第二題\xa0\xa0 網頁上的方格與塗色 \n 3. 完成上列題目後, 請利用 Youtube 影片 簡報 個人的解題過程與心得. \n \n', 'tags': '', 'url': 'w11_hw.html'}, {'title': 'w12_hw', 'text': "第一題:input(), and print() \n input()範例程式: What's your name? \n print()範例程式: cat \n", 'tags': '', 'url': 'w12_hw.html'}, {'title': 'w13 hw', 'text': '\n  利用 Brython 繪圖  \n \n', 'tags': '', 'url': 'w13 hw.html'}, {'title': 'w15 hw', 'text': 'w15,題目一:\xa0 以"從 1 累加到 100"作為 anchor 的連結標題: 連結 \n \xa0 \xa0 \xa0 \xa0題目二: 延伸上題, 設計一個函式 addto(1, 100), 可以完成上述的累加結果." addto " \n \xa0 \xa0 \xa0 \xa0題目三: 延伸上題, 設計一個函式 add_only_even(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數\xa0 \xa0 \xa0 \xa0 \xa0的累加結果.\'\' add_only_even \'\' \n \xa0 \xa0 \xa0 \xa0題目四: 延伸上題, 設計一個函式 add_avoid_8(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的\xa0 \xa0 \xa0 \xa0 \xa0累加過程, 必須避開數字出現"8"的整數." add_avoid_8 " \n', 'tags': '', 'url': 'w15 hw.html'}, {'title': 'w14_ex', 'text': '請根據兩個圓繪圖所圍成的 區域 (目前圍成三個區域, 但若圓心移動可能彼此獨立)進行不同顏色著色, 條件是當各圓半徑與圓心座標變動時, 程式只需輸入兩個圓的圓心座標與半徑, 就可以完成各區域的著色任務. \n 參考範例 \n 多個圓相交區域著色範例 \n 以下為參考範例的詳細說明, 請根據此一程式架構, 修改為三個圓的區域塗色任務. \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n 55 \n 56 \n 57 \n 58 \n 59 \n 60 \n 61 \n 62 \n 63 \n 64 \n 65 \n 66 \n 67 \n 68 \n 69 \n 70 \n 71 \n 72 \n 73 \n 74 \n 75 \n 76 \n 77 \n 78 \n 79 \n 80 \n 81 \n 82 \n 83 \n 84 \n 85 \n 86 \n 87 \n 88 \n 89 \n 90 \n 91 \n 92 \n 93 \n 94 \n 95 \n 96 \n 97 \n 98 \n 99 \n 100 \n 101 \n 102 \n 103 \n 104 \n 105 \n 106 \n 107 \n \n \n \n from   browser  import   html \n from   browser  import   document as doc \n import   random \n import   math \n \xa0 \n # 定義一個函式來初始化畫布 \n def   initialize_canvas(canvas_width = 400 , canvas_height = 400 ,  id = "brython_div1" ): \n \xa0\xa0\xa0\xa0 """ \n \xa0\xa0\xa0\xa0 初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。 \n \xa0\xa0\xa0\xa0 返回畫布元素和它的 2D 繪圖上下文。 \n \xa0\xa0\xa0\xa0 """ \n \xa0\xa0\xa0\xa0 # 創建一個 canvas 元素，並設置其寬度與高度 \n \xa0\xa0\xa0\xa0 canvas  =   html.CANVAS(width = canvas_width, height = canvas_height) \n \xa0\xa0\xa0\xa0 # 將創建的 canvas 元素添加到指定的 HTML div 元素中 \n \xa0\xa0\xa0\xa0 brython_div  =   doc[ id ]\xa0  # 獲取指定 id 的 div 元素 \n \xa0\xa0\xa0\xa0 brython_div < =   canvas\xa0  # 將 canvas 插入到該 div 中 \n \xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 # 獲取 canvas 的 2D 繪圖上下文，這是進行繪圖的主要接口 \n \xa0\xa0\xa0\xa0 ctx  =   canvas.getContext( "2d" ) \n \xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 # 返回畫布和它的 2D 繪圖上下文 \n \xa0\xa0\xa0\xa0 return   canvas, ctx \n \xa0 \n # 定義一個隨機顏色生成函式 \n def   random_color_generator(): \n \xa0\xa0\xa0\xa0 """ \n \xa0\xa0\xa0\xa0 生成一個隨機的 RGB 顏色字符串。 \n \xa0\xa0\xa0\xa0 返回的顏色是 "rgb(r, g, b)" 格式，其中 r, g, b 是 0 到 255 之間的隨機整數。 \n \xa0\xa0\xa0\xa0 """ \n \xa0\xa0\xa0\xa0 r  =   random.randint( 0 ,  255 )\xa0  # 隨機生成紅色成分 (0-255) \n \xa0\xa0\xa0\xa0 g  =   random.randint( 0 ,  255 )\xa0  # 隨機生成綠色成分 (0-255) \n \xa0\xa0\xa0\xa0 b  =   random.randint( 0 ,  255 )\xa0  # 隨機生成藍色成分 (0-255) \n \xa0\xa0\xa0\xa0 return   f "rgb({r}, {g}, {b})" \xa0  # 返回隨機顏色字符串 \n \xa0 \n # 判斷點 (px, py) 是否在圓內 \n def   is_point_in_circle(px, py, cx, cy, r): \n \xa0\xa0\xa0\xa0 """ \n \xa0\xa0\xa0\xa0 判斷一個點 (px, py) 是否位於圓 (cx, cy, r) 內。 \n \xa0\xa0\xa0\xa0 (cx, cy) 為圓心坐標，r 為圓的半徑。 \n \xa0\xa0\xa0\xa0 """ \n \xa0\xa0\xa0\xa0 # 使用圓的方程 (px - cx)² + (py - cy)² <= r² 判斷點是否在圓內 \n \xa0\xa0\xa0\xa0 return   (px  -   cx)  * *   2   +   (py  -   cy)  * *   2   < =   r  * *   2 \n \xa0 \n # 使用者設定的圓心座標和半徑，並進行掃描線填充 \n def   draw_circles(x1, y1, r1, x2, y2, r2): \n \xa0\xa0\xa0\xa0 """ \n \xa0\xa0\xa0\xa0 根據傳入的兩個圓的圓心和半徑，繪製圓形並使用掃描線算法填充區域。 \n \xa0\xa0\xa0\xa0 x1, y1, r1 是圓1的圓心坐標和半徑 \n \xa0\xa0\xa0\xa0 x2, y2, r2 是圓2的圓心坐標和半徑 \n \xa0\xa0\xa0\xa0 """ \n \xa0\xa0\xa0\xa0 # 初始化畫布，創建並取得畫布和其 2D 上下文 \n \xa0\xa0\xa0\xa0 canvas, ctx  =   initialize_canvas( 400 ,  400 ) \n \xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 # 清空畫布，以便重新繪製 \n \xa0\xa0\xa0\xa0 ctx.clearRect( 0 ,  0 , canvas.width, canvas.height) \n \xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 # 顏色區域存儲字典，存儲不同區域的顏色 \n \xa0\xa0\xa0\xa0 color_dict  =   {} \n \xa0 \n \xa0\xa0\xa0\xa0 # 使用掃描線方法填充區域，逐行掃描畫布上的每個像素 \n \xa0\xa0\xa0\xa0 for   py  in   range ( 0 , canvas.height):\xa0  # 遍歷每一行的 y 坐標 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 當前掃描線的顏色初始化為 None，後面會根據位置選擇顏色 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 current_color  =   None \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 遍歷當前行中的每個像素點 (px, py) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 for   px  in   range ( 0 , canvas.width):\xa0  # 遍歷每一列的 x 坐標 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 判斷該點是否在圓1內 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 in_circle1  =   is_point_in_circle(px, py, x1, y1, r1) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 判斷該點是否在圓2內 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 in_circle2  =   is_point_in_circle(px, py, x2, y2, r2) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   in_circle1  and   in_circle2: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 如果點同時在兩個圓內，則是交集區域 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   "intersection"   not   in   color_dict: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 如果還沒有為交集區域分配顏色，則分配一個隨機顏色 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 color_dict[ "intersection" ]  =   random_color_generator() \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 設置當前掃描線的顏色為交集區域的顏色 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 current_color  =   color_dict[ "intersection" ] \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 elif   in_circle1: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 如果點只在圓1內，則是圓1的區域 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   "circle1"   not   in   color_dict: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 如果還沒有為圓1分配顏色，則分配一個隨機顏色 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 color_dict[ "circle1" ]  =   random_color_generator() \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 設置當前掃描線的顏色為圓1區域的顏色 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 current_color  =   color_dict[ "circle1" ] \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 elif   in_circle2: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 如果點只在圓2內，則是圓2的區域 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   "circle2"   not   in   color_dict: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 如果還沒有為圓2分配顏色，則分配一個隨機顏色 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 color_dict[ "circle2" ]  =   random_color_generator() \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 設置當前掃描線的顏色為圓2區域的顏色 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 current_color  =   color_dict[ "circle2" ] \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 else : \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 如果點不在任何圓內，則是背景區域 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 current_color  =   "white" \xa0  # 背景色設為白色 \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 設置當前像素的顏色並進行填充 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 ctx.fillStyle  =   current_color \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 填充當前像素 (px, py)，並且寬度和高度均為 1 像素 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 ctx.fillRect(px, py,  1 ,  1 )\xa0  # 填充一個像素 \n \xa0 \n # 直接設定圓心和半徑 \n x1, y1, r1  =   150 ,  200 ,  100 \xa0  # 圓1：圓心 (150, 200)，半徑 100 \n x2, y2, r2  =   250 ,  200 ,  100 \xa0  # 圓2：圓心 (250, 200)，半徑 100 \n \xa0 \n # 呼叫畫圓函式，並繪製兩個圓 \n draw_circles(x1, y1, r1, x2, y2, r2) \n \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w14_ex.html'}, {'title': 'HW 2', 'text': '主題: Python 的數列、判斷式與重複迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 2 and Part 3 \n \n 延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%): \n PART 2: Introduction to lists and if/else statements \n PART 3: Introduction to the for loop \n 完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 2.html'}, {'title': 'HW 2 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'w16_exam1', 'text': '請以 自己的學號最後四碼 作為繪圖的座標原點 \n 影片連結: \n anchor \n from browser import html\nfrom browser import document as doc\n\n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width=500, height=500)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 取得 canvas 的繪圖上下文\nctx = canvas.getContext("2d")\n\n# 畫出 X 軸\nctx.beginPath()\nctx.strokeStyle = \'black\'\nctx.lineWidth = 2\nctx.moveTo(31, 20)  # 原點改為 (31, 20)\nctx.lineTo(400, 20)  # 向右延伸\nctx.stroke()\n\n# 畫出 Y 軸\nctx.beginPath()\nctx.moveTo(31, 20)  # 原點改為 (31, 20)\nctx.lineTo(31, 400)  # 向下延伸\nctx.stroke()\n\n# 標示原點座標\nctx.font = "12px Arial"\nctx.fillStyle = "black"\nctx.fillText("(31, 20)", 35, 33)\n\n# 位移偏移量，將原點 (31, 20) 作為新的繪圖基準\noffset_x = 31\noffset_y = 20\n\n# 畫橙色六邊形\nctx.beginPath()\nctx.fillStyle = "#F47920"\nctx.moveTo(offset_x + 40, offset_y + 43)\nctx.lineTo(offset_x + 60, offset_y + 13)\nctx.lineTo(offset_x + 90, offset_y + 13)\nctx.lineTo(offset_x + 110, offset_y + 43)\nctx.lineTo(offset_x + 90, offset_y + 63)\nctx.lineTo(offset_x + 60, offset_y + 63)\nctx.closePath()\nctx.fill()\n\n# 畫綠色菱形\nctx.beginPath()\nctx.fillStyle = "#009F95"\nctx.moveTo(offset_x + 130, offset_y + 43)\nctx.lineTo(offset_x + 150, offset_y + 13)\nctx.lineTo(offset_x + 170, offset_y + 43)\nctx.lineTo(offset_x + 150, offset_y + 73)\nctx.closePath()\nctx.fill()\n\n# 藍色三角形 (頂點在菱形右側，方向朝下)\nctx.beginPath()\nctx.fillStyle = "#40B4CB"\nctx.moveTo(offset_x + 174, offset_y + 43)  # 頂點在菱形右側\nctx.lineTo(offset_x + 154, offset_y + 73)  # 左下角\nctx.lineTo(offset_x + 194, offset_y + 73)  # 右下角\nctx.closePath()\nctx.fill()\n\n# 畫粉紅色圓形\nctx.beginPath()\nctx.fillStyle = "#EB008B"\nctx.arc(offset_x + 220, offset_y + 43, 20, 0, 2 * 3.14159)\nctx.fill()\n\n# 畫黃色正方形\nctx.beginPath()\nctx.fillStyle = "#FDD56A"\nctx.rect(offset_x + 260, offset_y + 23, 40, 40)\nctx.fill()\n\n# 畫藍色矩形\nctx.beginPath()\nctx.fillStyle = "#003A70"\nctx.rect(offset_x + 320, offset_y + 33, 60, 20)\nctx.fill()\n \n \n', 'tags': '', 'url': 'w16_exam1.html'}, {'title': 'HW 3', 'text': '主題: Python 的數字、演算法與迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 4 and Part 5 \n 完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 3.html'}, {'title': 'HW 3 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 3 Exam.html'}, {'title': 'w16_exam2', 'text': 'anchor \n 影片連結: \n', 'tags': '', 'url': 'w16_exam2.html'}, {'title': 'HW 4', 'text': '主題: 利用 Python 控制機電模擬系統 (20%) \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n 範例: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'w16_exam3', 'text': 'anchor \n 影片連結: \n', 'tags': '', 'url': 'w16_exam3.html'}, {'title': 'Final Report', 'text': '期末口頭與書面專題報告 (20%) \n 期末口頭專題報告影片: \n ...... \n 期末書面專題報告檔案 (pdf): \n ...... \n 電腦輔助設計與實習課程總結心得: \n ...... \n 期末報告自評成績: \n 完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束  \n \n  ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n \n \n', 'tags': '', 'url': 'Brython.html'}]};